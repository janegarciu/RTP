//SIMPLICTIC Handler in server

package tcp.server

import akka.actor.{Actor, ActorRef}
import akka.io.Tcp
import akka.util.ByteString

import scala.collection.mutable.ListBuffer

class SimplisticHandler extends Actor {

  import Tcp._

  var message = ""
  var tweets = new ListBuffer[String]()
  var users = new ListBuffer[String]()
  var address = ActorRef

  def receive = {
    case Received(data) =>
      message = data.utf8String

      message = data.utf8String

      if (message.contains("users_topic")) {
        println("Found users-topic")
        users.addOne(message)
      }
      else if (message.contains("tweets_topic")) {
        println("Found tweets-topic")
        tweets.addOne(message)

      }
      val splittedMessage = message.split(" ").toList
      if (splittedMessage[0].toString().contains("subscribe")) {
        if (splittedMessage[1].toString().contains("tweets")) {
          tweets.foreach(tweet => {
            val byteString = ByteString(tweet)
            sender() ! Write(ByteString("SERVER_RES: ").concat(byteString))
            address = sender()
          })
        }
        users.foreach(user => {
          val byteString = ByteString(user)
          sender() ! Write(ByteString("SERVER_RES: ").concat(byteString))
        })
      }
      else if (splittedMessage[0].toString().contains("unsubscribe")) {
        sender() ! ResumeWriting
      }

      println(s"Data received - ${data.utf8String}")
      println("Sender Actor Path" + sender().path.toString)
      sender() ! Write(ByteString("SERVER_RES: ").concat(data))
    case PeerClosed => context stop self
  }
}